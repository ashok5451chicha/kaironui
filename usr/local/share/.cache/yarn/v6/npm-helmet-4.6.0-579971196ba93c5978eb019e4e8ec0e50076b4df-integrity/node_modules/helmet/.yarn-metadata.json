{
  "manifest": {
    "name": "helmet",
    "author": {
      "name": "Adam Baldwin",
      "email": "adam@npmjs.com",
      "url": "https://evilpacket.net"
    },
    "contributors": [
      {
        "name": "Evan Hahn",
        "email": "me@evanhahn.com",
        "url": "https://evanhahn.com"
      },
      {
        "name": "Ameen Abdeen",
        "email": "ameen.abdeen.se@gmail.com"
      }
    ],
    "description": "help secure Express/Connect apps with various HTTP headers",
    "version": "4.6.0",
    "keywords": [
      "express",
      "security",
      "headers"
    ],
    "homepage": "https://helmetjs.github.io/",
    "bugs": {
      "url": "https://github.com/helmetjs/helmet/issues",
      "email": "me@evanhahn.com"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/helmetjs/helmet.git"
    },
    "engines": {
      "node": ">=10.0.0"
    },
    "devDependencies": {
      "@types/connect": "^3.4.34",
      "@types/jest": "^26.0.22",
      "@types/supertest": "^2.0.11",
      "@typescript-eslint/eslint-plugin": "^4.21.0",
      "@typescript-eslint/parser": "^4.21.0",
      "connect": "^3.7.0",
      "eslint": "^7.24.0",
      "jest": "^26.6.3",
      "prettier": "^2.2.1",
      "supertest": "^6.1.3",
      "ts-jest": "^26.5.4",
      "typescript": "^4.2.4"
    },
    "scripts": {
      "pretest": "npm run lint",
      "prepublishOnly": "npm run build",
      "lint": "npm run lint:eslint && npm run lint:prettier",
      "lint:eslint": "eslint \"**/*.ts\"",
      "lint:prettier": "prettier --check \"**/*{md,js,json,ts}\"",
      "format": "prettier --write \"**/*{md,js,json,ts}\"",
      "clean": "node ./bin/clean.js",
      "build": "npm run clean && tsc && npm run format",
      "build-middleware-package": "npm run build && node ./bin/build-middleware-package.js",
      "test": "jest"
    },
    "license": "MIT",
    "types": "dist/index.d.ts",
    "main": "dist/index",
    "_registry": "npm",
    "_loc": "/usr/local/share/.cache/yarn/v6/npm-helmet-4.6.0-579971196ba93c5978eb019e4e8ec0e50076b4df-integrity/node_modules/helmet/package.json",
    "readmeFilename": "README.md",
    "readme": "# Helmet\n\n[![npm version](https://badge.fury.io/js/helmet.svg)](https://badge.fury.io/js/helmet)\n[![npm dependency status](https://david-dm.org/helmetjs/helmet.svg)](https://david-dm.org/helmetjs/helmet)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet?ref=badge_shield)\n\nHelmet helps you secure your Express apps by setting various HTTP headers. _It's not a silver bullet_, but it can help!\n\n## Quick start\n\nFirst, run `npm install helmet --save` for your app. Then, in an Express app:\n\n```js\nconst express = require(\"express\");\nconst helmet = require(\"helmet\");\n\nconst app = express();\n\napp.use(helmet());\n\n// ...\n```\n\n## How it works\n\nHelmet is [Connect](https://github.com/senchalabs/connect)-style middleware, which is compatible with frameworks like [Express](https://expressjs.com/). (If you need support for Koa, see [`koa-helmet`](https://github.com/venables/koa-helmet).)\n\nThe top-level `helmet` function is a wrapper around 15 smaller middlewares, 11 of which are enabled by default.\n\nIn other words, these two things are equivalent:\n\n```js\n// This...\napp.use(helmet());\n\n// ...is equivalent to this:\napp.use(helmet.contentSecurityPolicy());\napp.use(helmet.dnsPrefetchControl());\napp.use(helmet.expectCt());\napp.use(helmet.frameguard());\napp.use(helmet.hidePoweredBy());\napp.use(helmet.hsts());\napp.use(helmet.ieNoOpen());\napp.use(helmet.noSniff());\napp.use(helmet.permittedCrossDomainPolicies());\napp.use(helmet.referrerPolicy());\napp.use(helmet.xssFilter());\n```\n\nTo set custom options for one of the middleware, add options like this:\n\n```js\n// This sets custom options for the `referrerPolicy` middleware.\napp.use(\n  helmet({\n    referrerPolicy: { policy: \"no-referrer\" },\n  })\n);\n```\n\nYou can also disable a middleware:\n\n```js\n// This disables the `contentSecurityPolicy` middleware but keeps the rest.\napp.use(\n  helmet({\n    contentSecurityPolicy: false,\n  })\n);\n```\n\n## Reference\n\n<details>\n<summary><code>helmet(options)</code></summary>\n\nHelmet is the top-level middleware for this module, including all 15 others.\n\n11 of 15 middlewares are included by default. `crossOriginEmbedderPolicy`, `crossOriginOpenerPolicy`, `crossOriginResourcePolicy`, and `originAgentCluster` are not included by default. They must be explicitly enabled. They will be turned on by default in the next major version of Helmet.\n\n```js\n// Includes all 11 middlewares\napp.use(helmet());\n```\n\nIf you want to disable one, pass options to `helmet`. For example, to disable `frameguard`:\n\n```js\n// Includes 10 middlewares, skipping `helmet.frameguard`\napp.use(\n  helmet({\n    frameguard: false,\n  })\n);\n```\n\nMost of the middlewares have options, which are documented in more detail below. For example, to pass `{ action: \"deny\" }` to `frameguard`:\n\n```js\n// Includes all 11 middlewares, setting an option for `helmet.frameguard`\napp.use(\n  helmet({\n    frameguard: {\n      action: \"deny\",\n    },\n  })\n);\n```\n\nEach middleware's name is listed below.\n\n</details>\n\n<details>\n<summary><code>helmet.contentSecurityPolicy(options)</code></summary>\n\n`helmet.contentSecurityPolicy` sets the `Content-Security-Policy` header which helps mitigate cross-site scripting attacks, among other things. See [MDN's introductory article on Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\nThis middleware performs very little validation. You should rely on CSP checkers like [CSP Evaluator](https://csp-evaluator.withgoogle.com/) instead.\n\n`options.directives` is an object. Each key is a directive name in camel case (such as `defaultSrc`) or kebab case (such as `default-src`). Each value is an iterable (usually an array) of strings or functions for that directive. If a function appears in the iterable, it will be called with the request and response. The `default-src` can be explicitly disabled by setting its value to `helmet.contentSecurityPolicy.dangerouslyDisableDefaultSrc`.\n\n`options.reportOnly` is a boolean, defaulting to `false`. If `true`, [the `Content-Security-Policy-Report-Only` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only) will be set instead.\n\nIf no directives are supplied, the following policy is set (whitespace added for readability):\n\n    default-src 'self';\n    base-uri 'self';\n    block-all-mixed-content;\n    font-src 'self' https: data:;\n    frame-ancestors 'self';\n    img-src 'self' data:;\n    object-src 'none';\n    script-src 'self';\n    script-src-attr 'none';\n    style-src 'self' https: 'unsafe-inline';\n    upgrade-insecure-requests\n\nYou can use this default with the `options.useDefaults` option. `options.useDefaults` is `false` by default, but will be `true` in the next major version of Helmet.\n\nYou can also get the default directives object with `helmet.contentSecurityPolicy.getDefaultDirectives()`.\n\nExamples:\n\n```js\n// Sets all of the defaults, but overrides `script-src` and disables the default `style-src`\napp.use(\n  helmet.contentSecurityPolicy({\n    useDefaults: true,\n    directives: {\n      \"script-src\": [\"'self'\", \"example.com\"],\n      \"style-src\": null,\n    },\n  })\n);\n\n// Sets \"Content-Security-Policy: default-src 'self';script-src 'self' example.com;object-src 'none';upgrade-insecure-requests\"\napp.use(\n  helmet.contentSecurityPolicy({\n    useDefaults: false,\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"example.com\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: [],\n    },\n  })\n);\n\n// Sets the \"Content-Security-Policy-Report-Only\" header instead\napp.use(\n  helmet.contentSecurityPolicy({\n    useDefaults: true,\n    directives: {\n      /* ... */\n    },\n    reportOnly: true,\n  })\n);\n\n// Sets the `script-src` directive to \"'self' 'nonce-e33ccde670f149c1789b1e1e113b0916'\" (or similar)\napp.use((req, res, next) => {\n  res.locals.cspNonce = crypto.randomBytes(16).toString(\"hex\");\n  next();\n});\napp.use(\n  helmet.contentSecurityPolicy({\n    useDefaults: true,\n    directives: {\n      scriptSrc: [\"'self'\", (req, res) => `'nonce-${res.locals.cspNonce}'`],\n    },\n  })\n);\n\n// Sets \"Content-Security-Policy: script-src 'self'\"\napp.use(\n  helmet.contentSecurityPolicy({\n    useDefaults: false,\n    directives: {\n      \"default-src\": helmet.contentSecurityPolicy.dangerouslyDisableDefaultSrc,\n      \"script-src\": [\"'self'\"],\n    },\n  })\n);\n```\n\nYou can install this module separately as `helmet-csp`.\n\n</details>\n\n<details>\n<summary><code>helmet.crossOriginEmbedderPolicy()</code></summary>\n\n`helmet.crossOriginEmbedderPolicy` sets the `Cross-Origin-Embedder-Policy` header to `require-corp`. See [MDN's article on this header](https://developer.cdn.mozilla.net/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) for more.\n\nThis middleware is not included when calling `helmet()` by default, and must be enabled explicitly. It will be enabled by default in the next major version of Helmet.\n\nExample usage with Helmet:\n\n```js\n// Uses the default Helmet options and adds the `crossOriginEmbedderPolicy` middleware.\n// Sets \"Cross-Origin-Embedder-Policy: require-corp\"\napp.use(helmet({ crossOriginEmbedderPolicy: true }));\n```\n\nStandalone example:\n\n```js\n// Sets \"Cross-Origin-Embedder-Policy: require-corp\"\napp.use(helmet.crossOriginEmbedderPolicy());\n```\n\nYou can't install this module separately.\n\n</details>\n\n<details>\n<summary><code>helmet.crossOriginOpenerPolicy()</code></summary>\n\n`helmet.crossOriginOpenerPolicy` sets the `Cross-Origin-Opener-Policy` header. For more, see [MDN's article on this header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy).\n\nThis middleware is not included when calling `helmet()` by default, and must be enabled explicitly. It will be enabled by default in the next major version of Helmet.\n\nExample usage with Helmet:\n\n```js\n// Uses the default Helmet options and adds the `crossOriginOpenerPolicy` middleware.\n\n// Sets \"Cross-Origin-Opener-Policy: same-origin\"\napp.use(helmet({ crossOriginOpenerPolicy: true }));\n\n// Sets \"Cross-Origin-Opener-Policy: same-origin-allow-popups\"\napp.use(\n  helmet({ crossOriginOpenerPolicy: { policy: \"same-origin-allow-popups\" } })\n);\n```\n\nStandalone example:\n\n```js\n// Sets \"Cross-Origin-Opener-Policy: same-origin\"\napp.use(helmet.crossOriginOpenerPolicy());\n\n// Sets \"Cross-Origin-Opener-Policy: same-origin-allow-popups\"\napp.use(helmet.crossOriginOpenerPolicy({ policy: \"same-origin-allow-popups\" }));\n\n// Sets \"unsafe-none-Opener-Policy: unsafe-none\"\napp.use(helmet.crossOriginOpenerPolicy({ policy: \"unsafe-none\" }));\n```\n\nYou can't install this module separately.\n\n</details>\n\n<details>\n<summary><code>helmet.crossOriginResourcePolicy()</code></summary>\n\n`helmet.crossOriginResourcePolicy` sets the `Cross-Origin-Resource-Policy` header. For more, see [\"Consider deploying Cross-Origin Resource Policy](https://resourcepolicy.fyi/) and [MDN's article on this header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy).\n\nThis middleware is not included when calling `helmet()` by default, and must be enabled explicitly. It will be enabled by default in the next major version of Helmet.\n\nExample usage with Helmet:\n\n```js\n// Uses the default Helmet options and adds the `crossOriginResourcePolicy` middleware.\n\n// Sets \"Cross-Origin-Resource-Policy: same-origin\"\napp.use(helmet({ crossOriginResourcePolicy: true }));\n\n// Sets \"Cross-Origin-Resource-Policy: same-site\"\napp.use(helmet({ crossOriginResourcePolicy: { policy: \"same-site\" } }));\n```\n\nStandalone example:\n\n```js\n// Sets \"Cross-Origin-Resource-Policy: same-origin\"\napp.use(helmet.crossOriginResourcePolicy());\n\n// Sets \"Cross-Origin-Resource-Policy: same-site\"\napp.use(helmet.crossOriginResourcePolicy({ policy: \"same-site\" }));\n\n// Sets \"Cross-Origin-Resource-Policy: cross-origin\"\napp.use(helmet.crossOriginResourcePolicy({ policy: \"cross-origin\" }));\n```\n\nYou can install this module separately as `cross-origin-resource-policy`.\n\n</details>\n\n<details>\n<summary><code>helmet.expectCt(options)</code></summary>\n\n`helmet.expectCt` sets the `Expect-CT` header which helps mitigate misissued SSL certificates. See [MDN's article on Certificate Transparency](https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency) and the [`Expect-CT` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT) for more.\n\n`options.maxAge` is the number of seconds to expect Certificate Transparency. It defaults to `0`.\n\n`options.enforce` is a boolean. If `true`, the user agent (usually a browser) should refuse future connections that violate its Certificate Transparency policy. Defaults to `false`.\n\n`options.reportUri` is a string. If set, complying user agents will report Certificate Transparency failures to this URL. Unset by default.\n\nExamples:\n\n```js\n// Sets \"Expect-CT: max-age=86400\"\napp.use(\n  helmet.expectCt({\n    maxAge: 86400,\n  })\n);\n\n// Sets \"Expect-CT: max-age=86400, enforce, report-uri=\"https://example.com/report\"\napp.use(\n  helmet.expectCt({\n    maxAge: 86400,\n    enforce: true,\n    reportUri: \"https://example.com/report\",\n  })\n);\n```\n\nYou can install this module separately as `expect-ct`.\n\n</details>\n\n<details>\n<summary><code>helmet.referrerPolicy(options)</code></summary>\n\n`helmet.referrerPolicy` sets the `Referrer-Policy` header which controls what information is set in [the `Referer` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer). See [\"Referer header: privacy and security concerns\"](https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns) and [the header's documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) on MDN for more.\n\n`options.policy` is a string or array of strings representing the policy. If passed as an array, it will be joined with commas, which is useful when setting [a fallback policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#Specifying_a_fallback_policy). It defaults to `no-referrer`.\n\nExamples:\n\n```js\n// Sets \"Referrer-Policy: no-referrer\"\napp.use(\n  helmet.referrerPolicy({\n    policy: \"no-referrer\",\n  })\n);\n\n// Sets \"Referrer-Policy: origin,unsafe-url\"\napp.use(\n  helmet.referrerPolicy({\n    policy: [\"origin\", \"unsafe-url\"],\n  })\n);\n```\n\nYou can install this module separately as `referrer-policy`.\n\n</details>\n\n<details>\n<summary><code>helmet.hsts(options)</code></summary>\n\n`helmet.hsts` sets the `Strict-Transport-Security` header which tells browsers to prefer HTTPS over insecure HTTP. See [the documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) for more.\n\n`options.maxAge` is the number of seconds browsers should remember to prefer HTTPS. If passed a non-integer, the value is rounded down. It defaults to `15552000`, which is 180 days.\n\n`options.includeSubDomains` is a boolean which dictates whether to include the `includeSubDomains` directive, which makes this policy extend to subdomains. It defaults to `true`.\n\n`options.preload` is a boolean. If true, it adds the `preload` directive, expressing intent to add your HSTS policy to browsers. See [the \"Preloading Strict Transport Security\" section on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security#Preloading_Strict_Transport_Security) for more. It defaults to `false`.\n\nExamples:\n\n```js\n// Sets \"Strict-Transport-Security: max-age=123456; includeSubDomains\"\napp.use(\n  helmet.hsts({\n    maxAge: 123456,\n  })\n);\n\n// Sets \"Strict-Transport-Security: max-age=123456\"\napp.use(\n  helmet.hsts({\n    maxAge: 123456,\n    includeSubDomains: false,\n  })\n);\n\n// Sets \"Strict-Transport-Security: max-age=123456; includeSubDomains; preload\"\napp.use(\n  helmet.hsts({\n    maxAge: 63072000,\n    preload: true,\n  })\n);\n```\n\nYou can install this module separately as `hsts`.\n\n</details>\n\n<details>\n<summary><code>helmet.noSniff()</code></summary>\n\n`helmet.noSniff` sets the `X-Content-Type-Options` header to `nosniff`. This mitigates [MIME type sniffing](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing) which can cause security vulnerabilities. See [documentation for this header on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) for more.\n\nThis middleware takes no options.\n\nExample:\n\n```js\n// Sets \"X-Content-Type-Options: nosniff\"\napp.use(helmet.noSniff());\n```\n\nYou can install this module separately as `dont-sniff-mimetype`.\n\n</details>\n\n<details>\n<summary><code>helmet.originAgentCluster()</code></summary>\n\n`helmet.originAgentCluster` sets the `Origin-Agent-Cluster` header, which provides a mechanism to allow web applications to isolate their origins. Read more about it [in the spec](https://whatpr.org/html/6214/origin.html#origin-keyed-agent-clusters).\n\nThis middleware is not included when calling `helmet()` by default, and must be enabled explicitly. It will be enabled by default in the next major version of Helmet.\n\nExample usage with Helmet:\n\n```js\n// Uses the default Helmet options and adds the `originAgentCluster` middleware.\n// Sets \"Origin-Agent-Cluster: ?1\"\napp.use(helmet({ originAgentCluster: true }));\n```\n\nStandalone example:\n\n```js\n// Sets \"Origin-Agent-Cluster: ?1\"\napp.use(helmet.originAgentCluster());\n```\n\nYou can't install this module separately.\n\n</details>\n\n<details>\n<summary><code>helmet.dnsPrefetchControl(options)</code></summary>\n\n`helmet.dnsPrefetchControl` sets the `X-DNS-Prefetch-Control` header to help control DNS prefetching, which can improve user privacy at the expense of performance. See [documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) for more.\n\n`options.allow` is a boolean dictating whether to enable DNS prefetching. It defaults to `false`.\n\nExamples:\n\n```js\n// Sets \"X-DNS-Prefetch-Control: off\"\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: false,\n  })\n);\n\n// Sets \"X-DNS-Prefetch-Control: on\"\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: true,\n  })\n);\n```\n\nYou can install this module separately as `dns-prefetch-control`.\n\n</details>\n\n<details>\n<summary><code>helmet.ieNoOpen()</code></summary>\n\n`helmet.ieNoOpen` sets the `X-Download-Options` header, which is specific to Internet Explorer 8. It forces potentially-unsafe downloads to be saved, mitigating execution of HTML in your site's context. For more, see [this old post on MSDN](https://docs.microsoft.com/en-us/archive/blogs/ie/ie8-security-part-v-comprehensive-protection).\n\nThis middleware takes no options.\n\nExamples:\n\n```js\n// Sets \"X-Download-Options: noopen\"\napp.use(helmet.ieNoOpen());\n```\n\nYou can install this module separately as `ienoopen`.\n\n</details>\n\n<details>\n<summary><code>helmet.frameguard(options)</code></summary>\n\n`helmet.frameguard` sets the `X-Frame-Options` header to help you mitigate [clickjacking attacks](https://en.wikipedia.org/wiki/Clickjacking). This header is superseded by [the `frame-ancestors` Content Security Policy directive](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) but is still useful on old browsers. For more, see [the documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options).\n\n`options.action` is a string that specifies which directive to use—either `DENY` or `SAMEORIGIN`. (A legacy directive, `ALLOW-FROM`, is not supported by this middleware. [Read more here.](https://github.com/helmetjs/helmet/wiki/How-to-use-X%E2%80%93Frame%E2%80%93Options's-%60ALLOW%E2%80%93FROM%60-directive)) It defaults to `SAMEORIGIN`.\n\nExamples:\n\n```js\n// Sets \"X-Frame-Options: DENY\"\napp.use(\n  helmet.frameguard({\n    action: \"deny\",\n  })\n);\n\n// Sets \"X-Frame-Options: SAMEORIGIN\"\napp.use(\n  helmet.frameguard({\n    action: \"sameorigin\",\n  })\n);\n```\n\nYou can install this module separately as `frameguard`.\n\n</details>\n\n<details>\n<summary><code>helmet.permittedCrossDomainPolicies(options)</code></summary>\n\n`helmet.permittedCrossDomainPolicies` sets the `X-Permitted-Cross-Domain-Policies` header, which tells some clients (mostly Adobe products) your domain's policy for loading cross-domain content. See [the description on OWASP](https://owasp.org/www-project-secure-headers/) for more.\n\n`options.permittedPolicies` is a string that must be `\"none\"`, `\"master-only\"`, `\"by-content-type\"`, or `\"all\"`. It defaults to `\"none\"`.\n\nExamples:\n\n```js\n// Sets \"X-Permitted-Cross-Domain-Policies: none\"\napp.use(\n  helmet.permittedCrossDomainPolicies({\n    permittedPolicies: \"none\",\n  })\n);\n\n// Sets \"X-Permitted-Cross-Domain-Policies: by-content-type\"\napp.use(\n  helmet.permittedCrossDomainPolicies({\n    permittedPolicies: \"by-content-type\",\n  })\n);\n```\n\nYou can install this module separately as `helmet-crossdomain`.\n\n</details>\n\n<details>\n<summary><code>helmet.hidePoweredBy()</code></summary>\n\n`helmet.hidePoweredBy` removes the `X-Powered-By` header, which is set by default in some frameworks (like Express). Removing the header offers very limited security benefits (see [this discussion](https://github.com/expressjs/express/pull/2813#issuecomment-159270428)) and is mostly removed to save bandwidth.\n\nThis middleware takes no options.\n\nIf you're using Express, this middleware will work, but you should use `app.disable(\"x-powered-by\")` instead.\n\nExamples:\n\n```js\n// Removes the X-Powered-By header if it was set.\napp.use(helmet.hidePoweredBy());\n```\n\nYou can install this module separately as `hide-powered-by`.\n\n</details>\n\n<details>\n<summary><code>helmet.xssFilter()</code></summary>\n\n`helmet.xssFilter` disables browsers' buggy cross-site scripting filter by setting the `X-XSS-Protection` header to `0`. See [discussion about disabling the header here](https://github.com/helmetjs/helmet/issues/230) and [documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection).\n\nThis middleware takes no options.\n\nExamples:\n\n```js\n// Sets \"X-XSS-Protection: 0\"\napp.use(helmet.xssFilter());\n```\n\nYou can install this module separately as `x-xss-protection`.\n\n</details>\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2012-2021 Evan Hahn, Adam Baldwin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/helmet/-/helmet-4.6.0.tgz#579971196ba93c5978eb019e4e8ec0e50076b4df",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/helmet/-/helmet-4.6.0.tgz",
    "hash": "579971196ba93c5978eb019e4e8ec0e50076b4df",
    "integrity": "sha512-HVqALKZlR95ROkrnesdhbbZJFi/rIVSoNq6f3jA/9u6MIbTsPh3xZwihjeI5+DO/2sOV6HMHooXcEOuwskHpTg==",
    "registry": "npm",
    "packageName": "helmet",
    "cacheIntegrity": "sha512-HVqALKZlR95ROkrnesdhbbZJFi/rIVSoNq6f3jA/9u6MIbTsPh3xZwihjeI5+DO/2sOV6HMHooXcEOuwskHpTg== sha1-V5lxGWupPFl46wGeTo7A5QB2tN8="
  },
  "registry": "npm",
  "hash": "579971196ba93c5978eb019e4e8ec0e50076b4df"
}